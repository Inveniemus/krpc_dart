import 'package:fixnum/fixnum.dart' show Int64;
import 'dart:typed_data' show Uint8List;
import '../src/krpc_client.dart' show KrpcClient;
import '../src/protobuf_handler.dart' show ProtobufHandler;
{{#imports}}
{{{import}}}
{{/imports}}

KrpcClient? _client;

// Service:
{{{documentation}}}
class {{{library_name}}} {
  {{{library_name}}}(KrpcClient krpcClient) { _client = krpcClient; }

  // Service Procedures
{{#service_procedures}}
{{{procedure_dart}}}

{{/service_procedures}}
}

// Service classes builder:
dynamic get{{{library_name}}}Class(String className, Int64 reference) {
  switch(className) {
    {{#classes}}
    case '{{class_name}}':
      return {{class_name}}(reference);
    {{/classes}}
    default:
      throw Exception('Unknown KRPC class $className');
  }
}

// Service classes:
{{#classes}}
{{{class_documentation}}}
class {{class_name}} {
    final Int64 ref;
    {{class_name}}(this.ref);

{{#class_procedures}}
{{{procedure_dart}}}

{{/class_procedures}}
}

{{/classes}}

// Service enumerations builder:
dynamic get{{{library_name}}}Enum(String enumName, int index) {
  switch(enumName) {
    {{#enumerations}}
    case '{{{enumeration_name}}}':
      return {{{enumeration_name}}}.values[index];
    {{/enumerations}}
    default:
      throw Exception('Unknown KRPC enumeration $enumName');
  }
}


// Service Enumerations
{{#enumerations}}
{{{enumeration_documentation}}}
enum {{{enumeration_name}}} {
  {{#enumeration_values}}{{{enumeration_value_name}}}, {{/enumeration_values}}
}
{{/enumerations}}

// Service Exceptions
{{#exceptions}}
{{{exception_documentation}}}
class {{{exception_name}}} implements Exception {}
{{/exceptions}}